/* Just so that we can scroll down and see the effect of 'position: fixed' */
body {
    height: 4000px;
}

.box {
    width: 100px;
    height: 100px;
}

.container {
    position: relative;
    width: 500px;
    height: 500px;
    background: #333;
}

/* 'static' is the default value for positioning. Static positioned elements are not
   affected by the top, bottom, left, and right properties.*/

/* An element with position: relative; is positioned relative to its normal position.
   Setting the top, right, bottom, and left properties of a relatively-positioned element
   will cause it to be adjusted away from its normal position. Other content will not
   be adjusted to fit into any gap left by the element. */
#box-1 {
    background: red;
    position: relative;
    top: 50px;
    left: 50px;
    /* The higher the value the 'closer to you' the element is */
    z-index: 1;
}

/* An element with position: absolute; is positioned relative to the nearest positioned ancestor
   (instead of positioned relative to the viewport, like fixed). However; if an absolute positioned
   element has no positioned ancestors, it uses the document body, and moves along with page scrolling.
   Note: A "positioned" element is one whose position is anything except static. */
#box-2 {
    background: yellow;
    top: 100px;
    left: 100px;
    position: absolute;
}

#box-3 {
    background: green;
    bottom: 100px;
    right: 100px;
    position: absolute;
}

/* An element with position: fixed; is positioned relative to the viewport (browser), which means it always
   stays in the same place even if the page is scrolled. The top, right, bottom, and left properties are used
   to position the element. A fixed element does not leave a gap in the page where it would normally have been located. */
#box-4 {
    background: blue;
    position: fixed;
}

/* An element with position: sticky; is positioned based on the user's scroll position. A sticky element toggles between
   relative and fixed, depending on the scroll position. It is positioned relative until a given offset position is met
   in the viewport - then it "sticks" in place (like position:fixed). */
#box-5 {
    background: orange;
    position: sticky;
    top: 0px;
}